import funkin.play.PlayState;
import funkin.Conductor;
import flixel.FlxG;

import funkin.play.event.SongEvent;
import funkin.data.event.SongEventSchema;

import funkin.modding.PolymodErrorHandler;
// import flixel.util.FlxColor; // A dream wish for now
import funkin.play.event.ScriptedSongEvent;

import funkin.ui.options.OptionsState;
import flixel.util.FlxSave;
import funkin.modding.module.ModuleHandler;
import funkin.modding.module.ScriptedModule;
import funkin.data.event.SongEventRegistry;

class CameraFlashFixes extends ScriptedModule {
  var shouldFixFlashEvent:Bool = true;

  public function new(){
    super('extra-events-cameraFlashFixes');
  }
  
  function onGameOver(event:ScriptEvent){
    super.onGameOver(event);
    if (PlayState.instance.camGame != null && shouldFixFlashEvent) PlayState.instance.camGame.stopFlash();
    if (PlayState.instance.camHUD != null && shouldFixFlashEvent) PlayState.instance.camHUD.stopFlash();
  }

  function onSongRetry(event:ScriptEvent){
    super.onSongRetry(event);
    if (PlayState.instance.camGame != null && shouldFixFlashEvent) PlayState.instance.camGame.stopFlash();
    if (PlayState.instance.camHUD != null && shouldFixFlashEvent) PlayState.instance.camHUD.stopFlash();
  }
}

class CameraFlashEvent extends ScriptedSongEvent {
  
  function new() {
      super("extra-events-cameraFlashEvent");
  }

  public var eventTitle:String = "Extra Events | Camera Flash";
  /*
  * white = 0xFFFFFFFF
  * red = 0xFFFF0000
  */
  public var DEFAULT_DURATION:Float = 1.0;
  public var DEFAULT_APPLYTOHUD:Bool = false; // self-explanatory, default to false for players who just want to read the notes like me
  public var DEFAULT_COLOR:Int = 12; // Black

  override function handleEvent(data):Void {
    if (PlayState.instance == null || PlayState.instance.currentStage == null) return;
    if (PlayState.instance.isMinimalMode) return;

    if (!Preferences.flashingLights) return;

    var duration:Float = data.getFloat('duration') != null ? data.getFloat('duration') : DEFAULT_DURATION;
    var applyToHud:Bool = data.getBool('applyToHud') != null ? data.getBool('applyToHud') : DEFAULT_APPLYTOHUD;
    var color:Int = data.getInt('color') != null ? data.getInt('color') : DEFAULT_COLOR;

    switch (color) {
      case 0: // Black
        color = 0xFF000000;
      case 1: // Blue
        color = 0xFF0000FF;
      case 2: // Brown
        color = 0xFFA52A2A;
      case 3: // Cyan
        color = 0xFF00FFFF;
      case 4: // Gray
        color = 0xFF808080;
      case 5: // Green
        color = 0xFF008000;
      case 6: // Lime
        color = 0xFF00FF00;
      case 7: // Magenta
        color = 0xFFFF00FF;
      case 8: // Orange
        color = 0xFFFFA500;
      case 9: // Purple
        color = 0xFF800080;
      case 10: // Red
        color = 0xFFFF0000;
      case 11: // Transparent
        color = 0x00000000;
      case 12: // White
        color = 0xFFFFFFFF;
      case 13: // Yellow
        color = 0xFFFFFF00;

      default: color = 0xFFFFFFFF;
    }

    var durSeconds = Conductor.instance.stepLengthMs * duration / 1000;

    if (duration <= 0) {
      PolymodErrorHandler.showAlert("Event execution error for " + eventTitle, "Duration cannot be less or equal to 0.\nDuration must be greater than 0.");
      return;
    }

    if (!applyToHud) {
      FlxG.camera.flash(color, durSeconds);
    } else {
      PlayState.instance.camHUD?.flash(color, durSeconds);
    }

  }

  public override function getTitle() {
    return eventTitle;
  }

  override function getEventSchema(){
    return [
      {
        name: 'duration',
        title: 'Duration',
        defaultValue: 1.0,
        step: 0.5,
        min: 0.5,
        type: "float",
        units: 'steps'
      },
      {
        name: 'applyToHud',
        title: 'Apply to camHUD',
        defaultValue: false,
        type: "bool"
      },
      {
        name: 'color',
        title: 'Color',
        defaultValue: 12,
        type: "enum",
        keys: [
          "Black" => 0,
          "Blue" => 1,
          "Brown" => 2,
          "Cyan" => 3,
          "Gray" => 4,
          "Green" => 5,
          "Lime" => 6,
          "Magenta" => 7,
          "Orange" => 8,
          "Purple" => 9,
          "Red" => 10,
          "Transparent" => 11,
          "White" => 12,
          "Yellow" => 13
        ]
      }
    ];
  }
}
